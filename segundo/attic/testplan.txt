# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the beginning. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic input`


[Subtask 1 - validators/st1.cpp]
  # Use sample data as test
  # 1 ; copy statement/sample-1.in
  # 1 ; copy statement/sample-2.in

  # Range from 1 to N
  2 ; shuffled_range.py 2
  2 ; shuffled_range.py 3

  # Random unique numbers
  3 ; random_sample.py 2
  3 ; random_sample.py 2
  3 ; random_sample.py 2
  3 ; random_sample.py 3
  3 ; random_sample.py 3
  3 ; random_sample.py 3


[Subtask 2 - validators/st2.cpp]
  # Range from 1 to N
  2 ; shuffled_range.py 100000

  # Random unique numbers
  3 ; random_sample.py 91084
  3 ; random_sample.py 99239
  3 ; random_sample.py 99364
  3 ; random_sample.py 99971
  3 ; random_sample.py 100000


[Subtask 3 - validators/st3.cpp]
  # Range from 1 to N
  2 ; shuffled_range.py 100000

  # Random unique numbers
  3 ; random_sample.py 100000

  # Random numbers, only the minimum is repeated
  4 ; random_sample_repeated_min.py 99239
  4 ; random_sample_repeated_min.py 100000

  # Random numbers, choose N from M different values (can repeat even if M > N)
  5 ; random_choices.py 80000 160000
  5 ; random_choices.py 90000 180000
  5 ; random_choices.py 100000 200000
  5 ; random_choices.py 80000 800
  5 ; random_choices.py 90000 900
  5 ; random_choices.py 100000 1000


[Subtask 4 - validators/st4.cpp]
  # Range from 1 to N
  2 ; shuffled_range.py 1000000

  # Random unique numbers
  3 ; random_sample.py 1000000

  # Random numbers, only the minimum is repeated
  4 ; random_sample_repeated_min.py 992396
  4 ; random_sample_repeated_min.py 1000000

  # Random numbers, choose N from M different values (can repeat even if M > N)
  5 ; random_choices.py 800000 1600000
  5 ; random_choices.py 900000 1800000
  5 ; random_choices.py 1000000 2000000
  5 ; random_choices.py 800000 8000
  5 ; random_choices.py 900000 9000
  5 ; random_choices.py 1000000 10000
